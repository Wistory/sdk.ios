// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Wistory
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import DeviceCheck
import Foundation
import ImageIO
import Nuke
import SafariServices
import Swift
import UIKit
import WebKit
@_exported import Wistory
import _Concurrency
import _StringProcessing
public typealias PlatformImageView = UIKit.UIImageView
open class SwiftyGifManager {
  public static var defaultManager: Wistory.SwiftyGifManager
  open var haveCache: Swift.Bool
  open var remoteCache: [Foundation.URL : Foundation.Data]
  public init(memoryLimit: Swift.Int)
  @objc deinit
  public func startTimerIfNeeded()
  public func stopTimer()
  open func addImageView(_ imageView: Wistory.PlatformImageView) -> Swift.Bool
  open func deleteImageView(_ imageView: Wistory.PlatformImageView)
  open func updateCacheSize(for imageView: Wistory.PlatformImageView, add: Swift.Bool)
  open func clear()
  open func containsImageView(_ imageView: Wistory.PlatformImageView) -> Swift.Bool
  open func hasCache(_ imageView: Wistory.PlatformImageView) -> Swift.Bool
}
@objc public protocol SwiftyGifDelegate {
  @objc optional func gifDidStart(sender: UIKit.UIImageView)
  @objc optional func gifDidLoop(sender: UIKit.UIImageView)
  @objc optional func gifDidStop(sender: UIKit.UIImageView)
  @objc optional func gifURLDidFinish(sender: UIKit.UIImageView)
  @objc optional func gifURLDidFail(sender: UIKit.UIImageView, url: Foundation.URL, error: Swift.Error?)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage, manager: Wistory.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) convenience public init(gifImage: UIKit.UIImage, manager: Wistory.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1)
  @_Concurrency.MainActor(unsafe) convenience public init(gifURL: Foundation.URL, manager: Wistory.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1)
  @_Concurrency.MainActor(unsafe) public func setGifImage(_ gifImage: UIKit.UIImage, manager: Wistory.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1)
}
extension UIKit.UIImageView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setGifFromURL(_ url: Foundation.URL, manager: Wistory.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1, levelOfIntegrity: Wistory.GifLevelOfIntegrity = .default, session: Foundation.URLSession = URLSession.shared, showLoader: Swift.Bool = true, customLoader: UIKit.UIView? = nil) -> Foundation.URLSessionDataTask?
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func startAnimatingGif()
  @_Concurrency.MainActor(unsafe) public func stopAnimatingGif()
  @_Concurrency.MainActor(unsafe) public func isAnimatingGif() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func showFrameForIndexDelta(_ delta: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func showFrameAtIndex(_ index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func updateCache()
  @_Concurrency.MainActor(unsafe) public func updateCurrentImage()
  @_Concurrency.MainActor(unsafe) public func currentFrameIndex() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func frameAtIndex(index: Swift.Int) -> UIKit.UIImage
  @_Concurrency.MainActor(unsafe) public func isDiscarded(_ imageView: UIKit.UIView?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func isDisplayedInScreen(_ imageView: UIKit.UIView?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func clear()
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public var gifImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var currentImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var loopCount: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var animationManager: Wistory.SwiftyGifManager? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var delegate: Wistory.SwiftyGifDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var displaying: Swift.Bool {
    get
    set
  }
}
extension UIKit.UIImage {
  public func maskWithColor(color: UIKit.UIColor) -> UIKit.UIImage
}
public typealias GifLevelOfIntegrity = Swift.Float
extension Swift.Float {
  public static let highestNoFrameSkipping: Wistory.GifLevelOfIntegrity
  public static let `default`: Wistory.GifLevelOfIntegrity
  public static let lowForManyGifs: Wistory.GifLevelOfIntegrity
  public static let lowForTooManyGifs: Wistory.GifLevelOfIntegrity
  public static let superLowForSlideShow: Wistory.GifLevelOfIntegrity
}
extension UIKit.UIImage {
  convenience public init?(imageData: Foundation.Data, levelOfIntegrity: Wistory.GifLevelOfIntegrity = .default) throws
  convenience public init?(imageName: Swift.String, levelOfIntegrity: Wistory.GifLevelOfIntegrity = .default) throws
}
extension UIKit.UIImage {
  convenience public init(gifData: Foundation.Data, levelOfIntegrity: Wistory.GifLevelOfIntegrity = .default) throws
  convenience public init(gifName: Swift.String, levelOfIntegrity: Wistory.GifLevelOfIntegrity = .default) throws
  public func setGifFromData(_ data: Foundation.Data, levelOfIntegrity: Wistory.GifLevelOfIntegrity) throws
  public func setGif(_ name: Swift.String) throws
  public func framesCount() -> Swift.Int
  public func setGif(_ name: Swift.String, levelOfIntegrity: Wistory.GifLevelOfIntegrity) throws
  public func clear()
}
extension UIKit.UIImage {
  public var imageSource: ImageIO.CGImageSource? {
    get
    set
  }
  public var displayRefreshFactor: Swift.Int? {
    get
    set
  }
  public var imageSize: Swift.Int? {
    get
    set
  }
  public var imageCount: Swift.Int? {
    get
    set
  }
  public var displayOrder: [Swift.Int]? {
    get
    set
  }
  public var imageData: Foundation.Data? {
    get
    set
  }
}
public protocol RootViewDelegate : AnyObject {
  func onItemsLoaded()
  func onRead(story: Wistory.SnapModel, isVolume: Swift.Bool?)
  func onPrevSnap(story: Wistory.SnapModel)
  func onNextSnap(story: Wistory.SnapModel)
  func onNavigate(action: Swift.String?, value: Swift.String)
  func onFavorite(id: Swift.String, isFavorite: Swift.Bool)
  func onRelation(id: Swift.String, relation: Swift.String)
  func onPoll(id: Swift.String, snap: Swift.Int, option: Swift.String)
  func onError(error: Swift.Error)
  func dismissed()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RootViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: Wistory.RootViewDelegate?
  @_Concurrency.MainActor(unsafe) public init(usageStyle: Wistory.StyleSettings)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension Wistory.RootViewController : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension Wistory.RootViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
extension Wistory.RootViewController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
public struct SnapModelDTO : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SnapModel : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol WistoryDelegate : AnyObject {
  func onRead(story: Wistory.SnapModel, isVolume: Swift.Bool?)
  func onPrevSnap(story: Wistory.SnapModel)
  func onNextSnap(story: Wistory.SnapModel)
  func onNavigate(action: Swift.String?, value: Swift.String)
  func onFavorite(id: Swift.String, isFavorite: Swift.Bool)
  func onRelation(id: Swift.String, relation: Swift.String)
  func onPoll(id: Swift.String, snap: Swift.Int, option: Swift.String)
  func onError(error: Swift.Error)
  func dismissed()
}
open class Wistory {
  weak public var delegate: Wistory.WistoryDelegate?
  public init(with companyToken: Swift.String, registrationId: Swift.String? = nil, usageSettings: Wistory.StyleSettings = .separate, displayTitle: Swift.Bool = true)
  public init(with companyToken: Swift.String, registrationId: Swift.String? = nil, eventId: Swift.String, root: UIKit.UIViewController, displayTitle: Swift.Bool = true)
  public var storiesViewController: Wistory.RootViewController?
  @objc deinit
}
extension Wistory.Wistory {
  @discardableResult
  public func presentingSettings(style: Wistory.PresentingSettings) -> Wistory.Wistory
  @discardableResult
  public func customBaseURL(url: Swift.String) -> Wistory.Wistory
  @discardableResult
  public func favouriteString(_ string: Swift.String) -> Wistory.Wistory
  @discardableResult
  public func imageFormat(format: Wistory.ImageFormat) -> Wistory.Wistory
}
public enum PresentingSettings : Swift.String {
  case fullscreen
  case popover
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StyleSettings {
  case embedded
  case separate
  public static func == (a: Wistory.StyleSettings, b: Wistory.StyleSettings) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DisplayTitle {
  case turnOn
  case turnOff
  public static func == (a: Wistory.DisplayTitle, b: Wistory.DisplayTitle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ImageFormat : Swift.String {
  case fullscreen
  case fixed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Options {
  public static var shared: Wistory.Options
  public var presentingStyle: Wistory.PresentingSettings
  public var imageFormat: Wistory.ImageFormat
  public var favouritesString: Swift.String
  public var displayTitle: Swift.Bool
}
extension Wistory.PresentingSettings : Swift.Equatable {}
extension Wistory.PresentingSettings : Swift.Hashable {}
extension Wistory.PresentingSettings : Swift.RawRepresentable {}
extension Wistory.StyleSettings : Swift.Equatable {}
extension Wistory.StyleSettings : Swift.Hashable {}
extension Wistory.DisplayTitle : Swift.Equatable {}
extension Wistory.DisplayTitle : Swift.Hashable {}
extension Wistory.ImageFormat : Swift.Equatable {}
extension Wistory.ImageFormat : Swift.Hashable {}
extension Wistory.ImageFormat : Swift.RawRepresentable {}
